/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeviceShadow
    /// </summary>
    [DataContract]
    public partial class DeviceShadow :  IEquatable<DeviceShadow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceShadow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceShadow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceShadow" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="capabilities">capabilities.</param>
        /// <param name="claimed">claimed (default to false).</param>
        /// <param name="claimedAt">claimedAt.</param>
        /// <param name="claimedBy">claimedBy.</param>
        /// <param name="claimedUntil">claimedUntil.</param>
        /// <param name="colorCode">colorCode.</param>
        /// <param name="description">description (default to &quot;&quot;).</param>
        /// <param name="desired">desired (default to &quot;&quot;).</param>
        /// <param name="deviceId">deviceId (required).</param>
        /// <param name="gpioPin">gpioPin (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="organizationId">organizationId.</param>
        /// <param name="outputId">outputId (default to 0).</param>
        /// <param name="reported">reported.</param>
        public DeviceShadow(string id = default(string), List<string> capabilities = default(List<string>), bool claimed = false, DateTime claimedAt = default(DateTime), string claimedBy = default(string), DateTime claimedUntil = default(DateTime), string colorCode = default(string), string description = "", string desired = "", string deviceId = default(string), int gpioPin = default(int), string name = default(string), string organizationId = default(string), int outputId = 0, string reported = default(string))
        {
            // to ensure "deviceId" is required (not null)
            if (deviceId == null)
            {
                throw new InvalidDataException("deviceId is a required property for DeviceShadow and cannot be null");
            }
            else
            {
                this.DeviceId = deviceId;
            }

            // to ensure "gpioPin" is required (not null)
            if (gpioPin == null)
            {
                throw new InvalidDataException("gpioPin is a required property for DeviceShadow and cannot be null");
            }
            else
            {
                this.GpioPin = gpioPin;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DeviceShadow and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Id = id;
            this.Capabilities = capabilities;
            // use default value if no "claimed" provided
            if (claimed == null)
            {
                this.Claimed = false;
            }
            else
            {
                this.Claimed = claimed;
            }
            this.ClaimedAt = claimedAt;
            this.ClaimedBy = claimedBy;
            this.ClaimedUntil = claimedUntil;
            this.ColorCode = colorCode;
            // use default value if no "description" provided
            if (description == null)
            {
                this.Description = "";
            }
            else
            {
                this.Description = description;
            }
            // use default value if no "desired" provided
            if (desired == null)
            {
                this.Desired = "";
            }
            else
            {
                this.Desired = desired;
            }
            this.OrganizationId = organizationId;
            // use default value if no "outputId" provided
            if (outputId == null)
            {
                this.OutputId = 0;
            }
            else
            {
                this.OutputId = outputId;
            }
            this.Reported = reported;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// Gets or Sets Claimed
        /// </summary>
        [DataMember(Name="claimed", EmitDefaultValue=false)]
        public bool Claimed { get; set; }

        /// <summary>
        /// Gets or Sets ClaimedAt
        /// </summary>
        [DataMember(Name="claimed_at", EmitDefaultValue=false)]
        public DateTime ClaimedAt { get; set; }

        /// <summary>
        /// Gets or Sets ClaimedBy
        /// </summary>
        [DataMember(Name="claimed_by", EmitDefaultValue=false)]
        public string ClaimedBy { get; set; }

        /// <summary>
        /// Gets or Sets ClaimedUntil
        /// </summary>
        [DataMember(Name="claimed_until", EmitDefaultValue=false)]
        public DateTime ClaimedUntil { get; set; }

        /// <summary>
        /// Gets or Sets ColorCode
        /// </summary>
        [DataMember(Name="color_code", EmitDefaultValue=false)]
        public string ColorCode { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Desired
        /// </summary>
        [DataMember(Name="desired", EmitDefaultValue=false)]
        public string Desired { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets GpioPin
        /// </summary>
        [DataMember(Name="gpio_pin", EmitDefaultValue=false)]
        public int GpioPin { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets OutputId
        /// </summary>
        [DataMember(Name="output_id", EmitDefaultValue=false)]
        public int OutputId { get; set; }

        /// <summary>
        /// Gets or Sets Reported
        /// </summary>
        [DataMember(Name="reported", EmitDefaultValue=false)]
        public string Reported { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceShadow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Claimed: ").Append(Claimed).Append("\n");
            sb.Append("  ClaimedAt: ").Append(ClaimedAt).Append("\n");
            sb.Append("  ClaimedBy: ").Append(ClaimedBy).Append("\n");
            sb.Append("  ClaimedUntil: ").Append(ClaimedUntil).Append("\n");
            sb.Append("  ColorCode: ").Append(ColorCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Desired: ").Append(Desired).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  GpioPin: ").Append(GpioPin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  OutputId: ").Append(OutputId).Append("\n");
            sb.Append("  Reported: ").Append(Reported).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceShadow);
        }

        /// <summary>
        /// Returns true if DeviceShadow instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceShadow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceShadow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    this.Capabilities != null &&
                    input.Capabilities != null &&
                    this.Capabilities.SequenceEqual(input.Capabilities)
                ) && 
                (
                    this.Claimed == input.Claimed ||
                    this.Claimed.Equals(input.Claimed)
                ) && 
                (
                    this.ClaimedAt == input.ClaimedAt ||
                    (this.ClaimedAt != null &&
                    this.ClaimedAt.Equals(input.ClaimedAt))
                ) && 
                (
                    this.ClaimedBy == input.ClaimedBy ||
                    (this.ClaimedBy != null &&
                    this.ClaimedBy.Equals(input.ClaimedBy))
                ) && 
                (
                    this.ClaimedUntil == input.ClaimedUntil ||
                    (this.ClaimedUntil != null &&
                    this.ClaimedUntil.Equals(input.ClaimedUntil))
                ) && 
                (
                    this.ColorCode == input.ColorCode ||
                    (this.ColorCode != null &&
                    this.ColorCode.Equals(input.ColorCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Desired == input.Desired ||
                    (this.Desired != null &&
                    this.Desired.Equals(input.Desired))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.GpioPin == input.GpioPin ||
                    this.GpioPin.Equals(input.GpioPin)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.OutputId == input.OutputId ||
                    this.OutputId.Equals(input.OutputId)
                ) && 
                (
                    this.Reported == input.Reported ||
                    (this.Reported != null &&
                    this.Reported.Equals(input.Reported))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Capabilities != null)
                    hashCode = hashCode * 59 + this.Capabilities.GetHashCode();
                hashCode = hashCode * 59 + this.Claimed.GetHashCode();
                if (this.ClaimedAt != null)
                    hashCode = hashCode * 59 + this.ClaimedAt.GetHashCode();
                if (this.ClaimedBy != null)
                    hashCode = hashCode * 59 + this.ClaimedBy.GetHashCode();
                if (this.ClaimedUntil != null)
                    hashCode = hashCode * 59 + this.ClaimedUntil.GetHashCode();
                if (this.ColorCode != null)
                    hashCode = hashCode * 59 + this.ColorCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Desired != null)
                    hashCode = hashCode * 59 + this.Desired.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                hashCode = hashCode * 59 + this.GpioPin.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                hashCode = hashCode * 59 + this.OutputId.GetHashCode();
                if (this.Reported != null)
                    hashCode = hashCode * 59 + this.Reported.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ColorCode (string) maxLength
            if(this.ColorCode != null && this.ColorCode.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ColorCode, length must be less than 6.", new [] { "ColorCode" });
            }

            // ColorCode (string) minLength
            if(this.ColorCode != null && this.ColorCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ColorCode, length must be greater than 1.", new [] { "ColorCode" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 100.", new [] { "Description" });
            }

            // Description (string) minLength
            if(this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // DeviceId (string) maxLength
            if(this.DeviceId != null && this.DeviceId.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceId, length must be less than 12.", new [] { "DeviceId" });
            }

            // DeviceId (string) minLength
            if(this.DeviceId != null && this.DeviceId.Length < 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceId, length must be greater than 12.", new [] { "DeviceId" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 20.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
