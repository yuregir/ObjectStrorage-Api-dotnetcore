/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Sensors
    /// </summary>
    [DataContract]
    public partial class Sensors :  IEquatable<Sensors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sensors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sensors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sensors" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="measurementName">measurementName.</param>
        /// <param name="measures">measures.</param>
        /// <param name="name">name (required).</param>
        /// <param name="sensorBrand">sensorBrand.</param>
        /// <param name="sensorModel">sensorModel.</param>
        public Sensors(string id = default(string), string measurementName = default(string), List<string> measures = default(List<string>), string name = default(string), string sensorBrand = default(string), string sensorModel = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Sensors and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Id = id;
            this.MeasurementName = measurementName;
            this.Measures = measures;
            this.SensorBrand = sensorBrand;
            this.SensorModel = sensorModel;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MeasurementName
        /// </summary>
        [DataMember(Name="measurement_name", EmitDefaultValue=false)]
        public string MeasurementName { get; set; }

        /// <summary>
        /// Gets or Sets Measures
        /// </summary>
        [DataMember(Name="measures", EmitDefaultValue=false)]
        public List<string> Measures { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SensorBrand
        /// </summary>
        [DataMember(Name="sensor_brand", EmitDefaultValue=false)]
        public string SensorBrand { get; set; }

        /// <summary>
        /// Gets or Sets SensorModel
        /// </summary>
        [DataMember(Name="sensor_model", EmitDefaultValue=false)]
        public string SensorModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sensors {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MeasurementName: ").Append(MeasurementName).Append("\n");
            sb.Append("  Measures: ").Append(Measures).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SensorBrand: ").Append(SensorBrand).Append("\n");
            sb.Append("  SensorModel: ").Append(SensorModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sensors);
        }

        /// <summary>
        /// Returns true if Sensors instances are equal
        /// </summary>
        /// <param name="input">Instance of Sensors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sensors input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MeasurementName == input.MeasurementName ||
                    (this.MeasurementName != null &&
                    this.MeasurementName.Equals(input.MeasurementName))
                ) && 
                (
                    this.Measures == input.Measures ||
                    this.Measures != null &&
                    input.Measures != null &&
                    this.Measures.SequenceEqual(input.Measures)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SensorBrand == input.SensorBrand ||
                    (this.SensorBrand != null &&
                    this.SensorBrand.Equals(input.SensorBrand))
                ) && 
                (
                    this.SensorModel == input.SensorModel ||
                    (this.SensorModel != null &&
                    this.SensorModel.Equals(input.SensorModel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MeasurementName != null)
                    hashCode = hashCode * 59 + this.MeasurementName.GetHashCode();
                if (this.Measures != null)
                    hashCode = hashCode * 59 + this.Measures.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SensorBrand != null)
                    hashCode = hashCode * 59 + this.SensorBrand.GetHashCode();
                if (this.SensorModel != null)
                    hashCode = hashCode * 59 + this.SensorModel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
