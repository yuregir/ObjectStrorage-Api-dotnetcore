/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardApiLogsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves one or more dashboard_api_logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetdashboardApiLogs (string where = null, string sort = null, int? page = null, int? maxResults = null);

        /// <summary>
        /// Retrieves one or more dashboard_api_logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetdashboardApiLogsWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null);
        /// <summary>
        /// Retrieves a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>DashboardApiLogs</returns>
        DashboardApiLogs GetdashboardApiLogsItem (string dashboardApiLogsId);

        /// <summary>
        /// Retrieves a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>ApiResponse of DashboardApiLogs</returns>
        ApiResponse<DashboardApiLogs> GetdashboardApiLogsItemWithHttpInfo (string dashboardApiLogsId);
        /// <summary>
        /// Updates a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns></returns>
        void PatchdashboardApiLogsItem (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);

        /// <summary>
        /// Updates a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchdashboardApiLogsItemWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);
        /// <summary>
        /// Stores one or more dashboard_api_logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns></returns>
        void PostdashboardApiLogs (DashboardApiLogs dashboardApiLogs);

        /// <summary>
        /// Stores one or more dashboard_api_logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostdashboardApiLogsWithHttpInfo (DashboardApiLogs dashboardApiLogs);
        /// <summary>
        /// Replaces a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns></returns>
        void PutdashboardApiLogsItem (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);

        /// <summary>
        /// Replaces a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutdashboardApiLogsItemWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardApiLogsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves one or more dashboard_api_logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetdashboardApiLogsAsync (string where = null, string sort = null, int? page = null, int? maxResults = null);

        /// <summary>
        /// Retrieves one or more dashboard_api_logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetdashboardApiLogsAsyncWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null);
        /// <summary>
        /// Retrieves a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>Task of DashboardApiLogs</returns>
        System.Threading.Tasks.Task<DashboardApiLogs> GetdashboardApiLogsItemAsync (string dashboardApiLogsId);

        /// <summary>
        /// Retrieves a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>Task of ApiResponse (DashboardApiLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<DashboardApiLogs>> GetdashboardApiLogsItemAsyncWithHttpInfo (string dashboardApiLogsId);
        /// <summary>
        /// Updates a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchdashboardApiLogsItemAsync (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);

        /// <summary>
        /// Updates a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchdashboardApiLogsItemAsyncWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);
        /// <summary>
        /// Stores one or more dashboard_api_logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostdashboardApiLogsAsync (DashboardApiLogs dashboardApiLogs);

        /// <summary>
        /// Stores one or more dashboard_api_logs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostdashboardApiLogsAsyncWithHttpInfo (DashboardApiLogs dashboardApiLogs);
        /// <summary>
        /// Replaces a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutdashboardApiLogsItemAsync (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);

        /// <summary>
        /// Replaces a dashboard-api-logs document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutdashboardApiLogsItemAsyncWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardApiLogsApi : IDashboardApiLogsApiSync, IDashboardApiLogsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DashboardApiLogsApi : IDashboardApiLogsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApiLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardApiLogsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApiLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardApiLogsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApiLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DashboardApiLogsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApiLogsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DashboardApiLogsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves one or more dashboard_api_logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetdashboardApiLogs (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse200> localVarResponse = GetdashboardApiLogsWithHttpInfo(where, sort, page, maxResults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves one or more dashboard_api_logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse200 > GetdashboardApiLogsWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (where != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (maxResults != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get< InlineResponse200 >("/dashboard_api_logs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetdashboardApiLogs", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieves one or more dashboard_api_logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetdashboardApiLogsAsync (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse200> localVarResponse = await GetdashboardApiLogsAsyncWithHttpInfo(where, sort, page, maxResults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves one or more dashboard_api_logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse200>> GetdashboardApiLogsAsyncWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (maxResults != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse200>("/dashboard_api_logs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetdashboardApiLogs", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieves a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>DashboardApiLogs</returns>
        public DashboardApiLogs GetdashboardApiLogsItem (string dashboardApiLogsId)
        {
             Org.OpenAPITools.Client.ApiResponse<DashboardApiLogs> localVarResponse = GetdashboardApiLogsItemWithHttpInfo(dashboardApiLogsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>ApiResponse of DashboardApiLogs</returns>
        public Org.OpenAPITools.Client.ApiResponse< DashboardApiLogs > GetdashboardApiLogsItemWithHttpInfo (string dashboardApiLogsId)
        {
            // verify the required parameter 'dashboardApiLogsId' is set
            if (dashboardApiLogsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogsId' when calling DashboardApiLogsApi->GetdashboardApiLogsItem");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dashboardApiLogsId != null)
                requestOptions.PathParameters.Add("dashboard-api-logsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dashboardApiLogsId)); // path parameter

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get< DashboardApiLogs >("/dashboard_api_logs/{dashboard-api-logsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetdashboardApiLogsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieves a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>Task of DashboardApiLogs</returns>
        public async System.Threading.Tasks.Task<DashboardApiLogs> GetdashboardApiLogsItemAsync (string dashboardApiLogsId)
        {
             Org.OpenAPITools.Client.ApiResponse<DashboardApiLogs> localVarResponse = await GetdashboardApiLogsItemAsyncWithHttpInfo(dashboardApiLogsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <returns>Task of ApiResponse (DashboardApiLogs)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DashboardApiLogs>> GetdashboardApiLogsItemAsyncWithHttpInfo (string dashboardApiLogsId)
        {
            // verify the required parameter 'dashboardApiLogsId' is set
            if (dashboardApiLogsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogsId' when calling DashboardApiLogsApi->GetdashboardApiLogsItem");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (dashboardApiLogsId != null)
                requestOptions.PathParameters.Add("dashboard-api-logsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dashboardApiLogsId)); // path parameter

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DashboardApiLogs>("/dashboard_api_logs/{dashboard-api-logsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetdashboardApiLogsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns></returns>
        public void PatchdashboardApiLogsItem (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
             PatchdashboardApiLogsItemWithHttpInfo(dashboardApiLogsId, ifMatch, dashboardApiLogs);
        }

        /// <summary>
        /// Updates a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PatchdashboardApiLogsItemWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
            // verify the required parameter 'dashboardApiLogsId' is set
            if (dashboardApiLogsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogsId' when calling DashboardApiLogsApi->PatchdashboardApiLogsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling DashboardApiLogsApi->PatchdashboardApiLogsItem");

            // verify the required parameter 'dashboardApiLogs' is set
            if (dashboardApiLogs == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogs' when calling DashboardApiLogsApi->PatchdashboardApiLogsItem");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dashboardApiLogsId != null)
                requestOptions.PathParameters.Add("dashboard-api-logsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dashboardApiLogsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = dashboardApiLogs;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Patch<Object>("/dashboard_api_logs/{dashboard-api-logsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PatchdashboardApiLogsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchdashboardApiLogsItemAsync (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
             await PatchdashboardApiLogsItemAsyncWithHttpInfo(dashboardApiLogsId, ifMatch, dashboardApiLogs);

        }

        /// <summary>
        /// Updates a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PatchdashboardApiLogsItemAsyncWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
            // verify the required parameter 'dashboardApiLogsId' is set
            if (dashboardApiLogsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogsId' when calling DashboardApiLogsApi->PatchdashboardApiLogsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling DashboardApiLogsApi->PatchdashboardApiLogsItem");

            // verify the required parameter 'dashboardApiLogs' is set
            if (dashboardApiLogs == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogs' when calling DashboardApiLogsApi->PatchdashboardApiLogsItem");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (dashboardApiLogsId != null)
                requestOptions.PathParameters.Add("dashboard-api-logsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dashboardApiLogsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = dashboardApiLogs;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PatchAsync<Object>("/dashboard_api_logs/{dashboard-api-logsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PatchdashboardApiLogsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Stores one or more dashboard_api_logs. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns></returns>
        public void PostdashboardApiLogs (DashboardApiLogs dashboardApiLogs)
        {
             PostdashboardApiLogsWithHttpInfo(dashboardApiLogs);
        }

        /// <summary>
        /// Stores one or more dashboard_api_logs. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PostdashboardApiLogsWithHttpInfo (DashboardApiLogs dashboardApiLogs)
        {
            // verify the required parameter 'dashboardApiLogs' is set
            if (dashboardApiLogs == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogs' when calling DashboardApiLogsApi->PostdashboardApiLogs");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = dashboardApiLogs;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/dashboard_api_logs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostdashboardApiLogs", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Stores one or more dashboard_api_logs. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostdashboardApiLogsAsync (DashboardApiLogs dashboardApiLogs)
        {
             await PostdashboardApiLogsAsyncWithHttpInfo(dashboardApiLogs);

        }

        /// <summary>
        /// Stores one or more dashboard_api_logs. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PostdashboardApiLogsAsyncWithHttpInfo (DashboardApiLogs dashboardApiLogs)
        {
            // verify the required parameter 'dashboardApiLogs' is set
            if (dashboardApiLogs == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogs' when calling DashboardApiLogsApi->PostdashboardApiLogs");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = dashboardApiLogs;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/dashboard_api_logs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostdashboardApiLogs", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replaces a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns></returns>
        public void PutdashboardApiLogsItem (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
             PutdashboardApiLogsItemWithHttpInfo(dashboardApiLogsId, ifMatch, dashboardApiLogs);
        }

        /// <summary>
        /// Replaces a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PutdashboardApiLogsItemWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
            // verify the required parameter 'dashboardApiLogsId' is set
            if (dashboardApiLogsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogsId' when calling DashboardApiLogsApi->PutdashboardApiLogsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling DashboardApiLogsApi->PutdashboardApiLogsItem");

            // verify the required parameter 'dashboardApiLogs' is set
            if (dashboardApiLogs == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogs' when calling DashboardApiLogsApi->PutdashboardApiLogsItem");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dashboardApiLogsId != null)
                requestOptions.PathParameters.Add("dashboard-api-logsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dashboardApiLogsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = dashboardApiLogs;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/dashboard_api_logs/{dashboard-api-logsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PutdashboardApiLogsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replaces a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutdashboardApiLogsItemAsync (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
             await PutdashboardApiLogsItemAsyncWithHttpInfo(dashboardApiLogsId, ifMatch, dashboardApiLogs);

        }

        /// <summary>
        /// Replaces a dashboard-api-logs document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardApiLogsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="dashboardApiLogs">A dashboard-api-logs or list of dashboard-api-logs documents</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PutdashboardApiLogsItemAsyncWithHttpInfo (string dashboardApiLogsId, string ifMatch, DashboardApiLogs dashboardApiLogs)
        {
            // verify the required parameter 'dashboardApiLogsId' is set
            if (dashboardApiLogsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogsId' when calling DashboardApiLogsApi->PutdashboardApiLogsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling DashboardApiLogsApi->PutdashboardApiLogsItem");

            // verify the required parameter 'dashboardApiLogs' is set
            if (dashboardApiLogs == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'dashboardApiLogs' when calling DashboardApiLogsApi->PutdashboardApiLogsItem");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (dashboardApiLogsId != null)
                requestOptions.PathParameters.Add("dashboard-api-logsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dashboardApiLogsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = dashboardApiLogs;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/dashboard_api_logs/{dashboard-api-logsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PutdashboardApiLogsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
