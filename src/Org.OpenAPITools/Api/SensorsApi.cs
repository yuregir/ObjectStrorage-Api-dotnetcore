/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISensorsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves one or more sensors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 Getsensors (string where = null, string sort = null, int? page = null, int? maxResults = null);

        /// <summary>
        /// Retrieves one or more sensors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetsensorsWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null);
        /// <summary>
        /// Retrieves a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>Sensors</returns>
        Sensors GetsensorsItem (string sensorsId);

        /// <summary>
        /// Retrieves a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>ApiResponse of Sensors</returns>
        ApiResponse<Sensors> GetsensorsItemWithHttpInfo (string sensorsId);
        /// <summary>
        /// Updates a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns></returns>
        void PatchsensorsItem (string sensorsId, string ifMatch, Sensors sensors);

        /// <summary>
        /// Updates a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchsensorsItemWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors);
        /// <summary>
        /// Stores one or more sensors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns></returns>
        void Postsensors (Sensors sensors);

        /// <summary>
        /// Stores one or more sensors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostsensorsWithHttpInfo (Sensors sensors);
        /// <summary>
        /// Replaces a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns></returns>
        void PutsensorsItem (string sensorsId, string ifMatch, Sensors sensors);

        /// <summary>
        /// Replaces a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutsensorsItemWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISensorsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves one or more sensors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetsensorsAsync (string where = null, string sort = null, int? page = null, int? maxResults = null);

        /// <summary>
        /// Retrieves one or more sensors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetsensorsAsyncWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null);
        /// <summary>
        /// Retrieves a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>Task of Sensors</returns>
        System.Threading.Tasks.Task<Sensors> GetsensorsItemAsync (string sensorsId);

        /// <summary>
        /// Retrieves a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>Task of ApiResponse (Sensors)</returns>
        System.Threading.Tasks.Task<ApiResponse<Sensors>> GetsensorsItemAsyncWithHttpInfo (string sensorsId);
        /// <summary>
        /// Updates a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchsensorsItemAsync (string sensorsId, string ifMatch, Sensors sensors);

        /// <summary>
        /// Updates a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchsensorsItemAsyncWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors);
        /// <summary>
        /// Stores one or more sensors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostsensorsAsync (Sensors sensors);

        /// <summary>
        /// Stores one or more sensors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostsensorsAsyncWithHttpInfo (Sensors sensors);
        /// <summary>
        /// Replaces a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutsensorsItemAsync (string sensorsId, string ifMatch, Sensors sensors);

        /// <summary>
        /// Replaces a sensors document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutsensorsItemAsyncWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISensorsApi : ISensorsApiSync, ISensorsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SensorsApi : ISensorsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SensorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SensorsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SensorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SensorsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SensorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SensorsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SensorsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SensorsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves one or more sensors 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 Getsensors (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse20012> localVarResponse = GetsensorsWithHttpInfo(where, sort, page, maxResults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves one or more sensors 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse20012 > GetsensorsWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (where != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (maxResults != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get< InlineResponse20012 >("/sensors", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Getsensors", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieves one or more sensors 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetsensorsAsync (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse20012> localVarResponse = await GetsensorsAsyncWithHttpInfo(where, sort, page, maxResults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves one or more sensors 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">the filters query parameter (ex.: {\&quot;number\&quot;: 10}) (optional)</param>
        /// <param name="sort">the sort query parameter (ex.: \&quot;city,-lastname\&quot;) (optional)</param>
        /// <param name="page">the pages query parameter (optional)</param>
        /// <param name="maxResults">the max results query parameter (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse20012>> GetsensorsAsyncWithHttpInfo (string where = null, string sort = null, int? page = null, int? maxResults = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (maxResults != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max_results", maxResults))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/sensors", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Getsensors", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieves a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>Sensors</returns>
        public Sensors GetsensorsItem (string sensorsId)
        {
             Org.OpenAPITools.Client.ApiResponse<Sensors> localVarResponse = GetsensorsItemWithHttpInfo(sensorsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>ApiResponse of Sensors</returns>
        public Org.OpenAPITools.Client.ApiResponse< Sensors > GetsensorsItemWithHttpInfo (string sensorsId)
        {
            // verify the required parameter 'sensorsId' is set
            if (sensorsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensorsId' when calling SensorsApi->GetsensorsItem");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sensorsId != null)
                requestOptions.PathParameters.Add("sensorsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sensorsId)); // path parameter

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Get< Sensors >("/sensors/{sensorsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetsensorsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Retrieves a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>Task of Sensors</returns>
        public async System.Threading.Tasks.Task<Sensors> GetsensorsItemAsync (string sensorsId)
        {
             Org.OpenAPITools.Client.ApiResponse<Sensors> localVarResponse = await GetsensorsItemAsyncWithHttpInfo(sensorsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <returns>Task of ApiResponse (Sensors)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Sensors>> GetsensorsItemAsyncWithHttpInfo (string sensorsId)
        {
            // verify the required parameter 'sensorsId' is set
            if (sensorsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensorsId' when calling SensorsApi->GetsensorsItem");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (sensorsId != null)
                requestOptions.PathParameters.Add("sensorsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sensorsId)); // path parameter

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Sensors>("/sensors/{sensorsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetsensorsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns></returns>
        public void PatchsensorsItem (string sensorsId, string ifMatch, Sensors sensors)
        {
             PatchsensorsItemWithHttpInfo(sensorsId, ifMatch, sensors);
        }

        /// <summary>
        /// Updates a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PatchsensorsItemWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors)
        {
            // verify the required parameter 'sensorsId' is set
            if (sensorsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensorsId' when calling SensorsApi->PatchsensorsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling SensorsApi->PatchsensorsItem");

            // verify the required parameter 'sensors' is set
            if (sensors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensors' when calling SensorsApi->PatchsensorsItem");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sensorsId != null)
                requestOptions.PathParameters.Add("sensorsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sensorsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = sensors;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Patch<Object>("/sensors/{sensorsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PatchsensorsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchsensorsItemAsync (string sensorsId, string ifMatch, Sensors sensors)
        {
             await PatchsensorsItemAsyncWithHttpInfo(sensorsId, ifMatch, sensors);

        }

        /// <summary>
        /// Updates a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PatchsensorsItemAsyncWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors)
        {
            // verify the required parameter 'sensorsId' is set
            if (sensorsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensorsId' when calling SensorsApi->PatchsensorsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling SensorsApi->PatchsensorsItem");

            // verify the required parameter 'sensors' is set
            if (sensors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensors' when calling SensorsApi->PatchsensorsItem");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (sensorsId != null)
                requestOptions.PathParameters.Add("sensorsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sensorsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = sensors;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PatchAsync<Object>("/sensors/{sensorsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PatchsensorsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Stores one or more sensors. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns></returns>
        public void Postsensors (Sensors sensors)
        {
             PostsensorsWithHttpInfo(sensors);
        }

        /// <summary>
        /// Stores one or more sensors. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PostsensorsWithHttpInfo (Sensors sensors)
        {
            // verify the required parameter 'sensors' is set
            if (sensors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensors' when calling SensorsApi->Postsensors");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = sensors;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/sensors", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Postsensors", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Stores one or more sensors. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostsensorsAsync (Sensors sensors)
        {
             await PostsensorsAsyncWithHttpInfo(sensors);

        }

        /// <summary>
        /// Stores one or more sensors. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PostsensorsAsyncWithHttpInfo (Sensors sensors)
        {
            // verify the required parameter 'sensors' is set
            if (sensors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensors' when calling SensorsApi->Postsensors");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = sensors;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/sensors", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Postsensors", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replaces a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns></returns>
        public void PutsensorsItem (string sensorsId, string ifMatch, Sensors sensors)
        {
             PutsensorsItemWithHttpInfo(sensorsId, ifMatch, sensors);
        }

        /// <summary>
        /// Replaces a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PutsensorsItemWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors)
        {
            // verify the required parameter 'sensorsId' is set
            if (sensorsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensorsId' when calling SensorsApi->PutsensorsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling SensorsApi->PutsensorsItem");

            // verify the required parameter 'sensors' is set
            if (sensors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensors' when calling SensorsApi->PutsensorsItem");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sensorsId != null)
                requestOptions.PathParameters.Add("sensorsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sensorsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = sensors;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/sensors/{sensorsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PutsensorsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Replaces a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutsensorsItemAsync (string sensorsId, string ifMatch, Sensors sensors)
        {
             await PutsensorsItemAsyncWithHttpInfo(sensorsId, ifMatch, sensors);

        }

        /// <summary>
        /// Replaces a sensors document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsId"></param>
        /// <param name="ifMatch">Current value of the _etag field</param>
        /// <param name="sensors">A sensors or list of sensors documents</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PutsensorsItemAsyncWithHttpInfo (string sensorsId, string ifMatch, Sensors sensors)
        {
            // verify the required parameter 'sensorsId' is set
            if (sensorsId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensorsId' when calling SensorsApi->PutsensorsItem");

            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ifMatch' when calling SensorsApi->PutsensorsItem");

            // verify the required parameter 'sensors' is set
            if (sensors == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sensors' when calling SensorsApi->PutsensorsItem");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (sensorsId != null)
                requestOptions.PathParameters.Add("sensorsId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sensorsId)); // path parameter
            if (ifMatch != null)
                requestOptions.HeaderParameters.Add("If-Match", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifMatch)); // header parameter
            requestOptions.Data = sensors;

            // authentication (ApiKeyHeaderAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApiKeyQueryAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/sensors/{sensorsId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PutsensorsItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
