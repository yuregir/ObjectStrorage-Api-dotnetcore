/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing OplogApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OplogApiTests : IDisposable
    {
        private OplogApi instance;

        public OplogApiTests()
        {
            instance = new OplogApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OplogApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OplogApi
            //Assert.IsType(typeof(OplogApi), instance, "instance is a OplogApi");
        }

        
        /// <summary>
        /// Test GetOplogItem
        /// </summary>
        [Fact]
        public void GetOplogItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oplogId = null;
            //var response = instance.GetOplogItem(oplogId);
            //Assert.IsType<Oplog> (response, "response is Oplog");
        }
        
        /// <summary>
        /// Test Getoplog
        /// </summary>
        [Fact]
        public void GetoplogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //string sort = null;
            //int? page = null;
            //int? maxResults = null;
            //var response = instance.Getoplog(where, sort, page, maxResults);
            //Assert.IsType<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
    }

}
