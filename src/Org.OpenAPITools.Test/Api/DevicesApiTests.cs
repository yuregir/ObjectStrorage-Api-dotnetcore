/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DevicesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DevicesApiTests : IDisposable
    {
        private DevicesApi instance;

        public DevicesApiTests()
        {
            instance = new DevicesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DevicesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DevicesApi
            //Assert.IsType(typeof(DevicesApi), instance, "instance is a DevicesApi");
        }

        
        /// <summary>
        /// Test Getdevices
        /// </summary>
        [Fact]
        public void GetdevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //string sort = null;
            //int? page = null;
            //int? maxResults = null;
            //var response = instance.Getdevices(where, sort, page, maxResults);
            //Assert.IsType<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test GetdevicesItem
        /// </summary>
        [Fact]
        public void GetdevicesItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string devicesId = null;
            //var response = instance.GetdevicesItem(devicesId);
            //Assert.IsType<Devices> (response, "response is Devices");
        }
        
        /// <summary>
        /// Test PatchdevicesItem
        /// </summary>
        [Fact]
        public void PatchdevicesItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string devicesId = null;
            //string ifMatch = null;
            //Devices devices = null;
            //instance.PatchdevicesItem(devicesId, ifMatch, devices);
            
        }
        
        /// <summary>
        /// Test Postdevices
        /// </summary>
        [Fact]
        public void PostdevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Devices devices = null;
            //instance.Postdevices(devices);
            
        }
        
        /// <summary>
        /// Test PutdevicesItem
        /// </summary>
        [Fact]
        public void PutdevicesItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string devicesId = null;
            //string ifMatch = null;
            //Devices devices = null;
            //instance.PutdevicesItem(devicesId, ifMatch, devices);
            
        }
        
    }

}
