/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DeviceShadowApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DeviceShadowApiTests : IDisposable
    {
        private DeviceShadowApi instance;

        public DeviceShadowApiTests()
        {
            instance = new DeviceShadowApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DeviceShadowApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeviceShadowApi
            //Assert.IsType(typeof(DeviceShadowApi), instance, "instance is a DeviceShadowApi");
        }

        
        /// <summary>
        /// Test GetdeviceShadow
        /// </summary>
        [Fact]
        public void GetdeviceShadowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //string sort = null;
            //int? page = null;
            //int? maxResults = null;
            //var response = instance.GetdeviceShadow(where, sort, page, maxResults);
            //Assert.IsType<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test GetdeviceShadowItem
        /// </summary>
        [Fact]
        public void GetdeviceShadowItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceShadowId = null;
            //var response = instance.GetdeviceShadowItem(deviceShadowId);
            //Assert.IsType<DeviceShadow> (response, "response is DeviceShadow");
        }
        
        /// <summary>
        /// Test PatchdeviceShadowItem
        /// </summary>
        [Fact]
        public void PatchdeviceShadowItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceShadowId = null;
            //string ifMatch = null;
            //DeviceShadow deviceShadow = null;
            //instance.PatchdeviceShadowItem(deviceShadowId, ifMatch, deviceShadow);
            
        }
        
        /// <summary>
        /// Test PostdeviceShadow
        /// </summary>
        [Fact]
        public void PostdeviceShadowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceShadow deviceShadow = null;
            //instance.PostdeviceShadow(deviceShadow);
            
        }
        
        /// <summary>
        /// Test PutdeviceShadowItem
        /// </summary>
        [Fact]
        public void PutdeviceShadowItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceShadowId = null;
            //string ifMatch = null;
            //DeviceShadow deviceShadow = null;
            //instance.PutdeviceShadowItem(deviceShadowId, ifMatch, deviceShadow);
            
        }
        
    }

}
