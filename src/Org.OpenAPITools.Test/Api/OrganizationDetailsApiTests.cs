/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing OrganizationDetailsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrganizationDetailsApiTests : IDisposable
    {
        private OrganizationDetailsApi instance;

        public OrganizationDetailsApiTests()
        {
            instance = new OrganizationDetailsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrganizationDetailsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OrganizationDetailsApi
            //Assert.IsType(typeof(OrganizationDetailsApi), instance, "instance is a OrganizationDetailsApi");
        }

        
        /// <summary>
        /// Test GetorgDetails
        /// </summary>
        [Fact]
        public void GetorgDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //string sort = null;
            //int? page = null;
            //int? maxResults = null;
            //var response = instance.GetorgDetails(where, sort, page, maxResults);
            //Assert.IsType<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test GetorganizationDetailsItem
        /// </summary>
        [Fact]
        public void GetorganizationDetailsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationDetailsId = null;
            //var response = instance.GetorganizationDetailsItem(organizationDetailsId);
            //Assert.IsType<OrganizationDetails> (response, "response is OrganizationDetails");
        }
        
        /// <summary>
        /// Test PatchorganizationDetailsItem
        /// </summary>
        [Fact]
        public void PatchorganizationDetailsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationDetailsId = null;
            //string ifMatch = null;
            //OrganizationDetails organizationDetails = null;
            //instance.PatchorganizationDetailsItem(organizationDetailsId, ifMatch, organizationDetails);
            
        }
        
        /// <summary>
        /// Test PostorgDetails
        /// </summary>
        [Fact]
        public void PostorgDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrganizationDetails organizationDetails = null;
            //instance.PostorgDetails(organizationDetails);
            
        }
        
        /// <summary>
        /// Test PutorganizationDetailsItem
        /// </summary>
        [Fact]
        public void PutorganizationDetailsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationDetailsId = null;
            //string ifMatch = null;
            //OrganizationDetails organizationDetails = null;
            //instance.PutorganizationDetailsItem(organizationDetailsId, ifMatch, organizationDetails);
            
        }
        
    }

}
