/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ShownWidgetSettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShownWidgetSettingsApiTests : IDisposable
    {
        private ShownWidgetSettingsApi instance;

        public ShownWidgetSettingsApiTests()
        {
            instance = new ShownWidgetSettingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShownWidgetSettingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ShownWidgetSettingsApi
            //Assert.IsType(typeof(ShownWidgetSettingsApi), instance, "instance is a ShownWidgetSettingsApi");
        }

        
        /// <summary>
        /// Test GetshownWidgetSettings
        /// </summary>
        [Fact]
        public void GetshownWidgetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //string sort = null;
            //int? page = null;
            //int? maxResults = null;
            //var response = instance.GetshownWidgetSettings(where, sort, page, maxResults);
            //Assert.IsType<InlineResponse20013> (response, "response is InlineResponse20013");
        }
        
        /// <summary>
        /// Test GetshownWidgetSettingsItem
        /// </summary>
        [Fact]
        public void GetshownWidgetSettingsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shownWidgetSettingsId = null;
            //var response = instance.GetshownWidgetSettingsItem(shownWidgetSettingsId);
            //Assert.IsType<ShownWidgetSettings> (response, "response is ShownWidgetSettings");
        }
        
        /// <summary>
        /// Test PatchshownWidgetSettingsItem
        /// </summary>
        [Fact]
        public void PatchshownWidgetSettingsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shownWidgetSettingsId = null;
            //string ifMatch = null;
            //ShownWidgetSettings shownWidgetSettings = null;
            //instance.PatchshownWidgetSettingsItem(shownWidgetSettingsId, ifMatch, shownWidgetSettings);
            
        }
        
        /// <summary>
        /// Test PostshownWidgetSettings
        /// </summary>
        [Fact]
        public void PostshownWidgetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ShownWidgetSettings shownWidgetSettings = null;
            //instance.PostshownWidgetSettings(shownWidgetSettings);
            
        }
        
        /// <summary>
        /// Test PutshownWidgetSettingsItem
        /// </summary>
        [Fact]
        public void PutshownWidgetSettingsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shownWidgetSettingsId = null;
            //string ifMatch = null;
            //ShownWidgetSettings shownWidgetSettings = null;
            //instance.PutshownWidgetSettingsItem(shownWidgetSettingsId, ifMatch, shownWidgetSettings);
            
        }
        
    }

}
