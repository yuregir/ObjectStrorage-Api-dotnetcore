/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SensorsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SensorsApiTests : IDisposable
    {
        private SensorsApi instance;

        public SensorsApiTests()
        {
            instance = new SensorsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SensorsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SensorsApi
            //Assert.IsType(typeof(SensorsApi), instance, "instance is a SensorsApi");
        }

        
        /// <summary>
        /// Test Getsensors
        /// </summary>
        [Fact]
        public void GetsensorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //string sort = null;
            //int? page = null;
            //int? maxResults = null;
            //var response = instance.Getsensors(where, sort, page, maxResults);
            //Assert.IsType<InlineResponse20012> (response, "response is InlineResponse20012");
        }
        
        /// <summary>
        /// Test GetsensorsItem
        /// </summary>
        [Fact]
        public void GetsensorsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorsId = null;
            //var response = instance.GetsensorsItem(sensorsId);
            //Assert.IsType<Sensors> (response, "response is Sensors");
        }
        
        /// <summary>
        /// Test PatchsensorsItem
        /// </summary>
        [Fact]
        public void PatchsensorsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorsId = null;
            //string ifMatch = null;
            //Sensors sensors = null;
            //instance.PatchsensorsItem(sensorsId, ifMatch, sensors);
            
        }
        
        /// <summary>
        /// Test Postsensors
        /// </summary>
        [Fact]
        public void PostsensorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Sensors sensors = null;
            //instance.Postsensors(sensors);
            
        }
        
        /// <summary>
        /// Test PutsensorsItem
        /// </summary>
        [Fact]
        public void PutsensorsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sensorsId = null;
            //string ifMatch = null;
            //Sensors sensors = null;
            //instance.PutsensorsItem(sensorsId, ifMatch, sensors);
            
        }
        
    }

}
