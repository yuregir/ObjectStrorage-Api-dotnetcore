/* 
 * Metacore IOT Object Storage API
 *
 * Metacore IOT Core Services
 *
 * The version of the OpenAPI document: 0.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing RoleSettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RoleSettingsApiTests : IDisposable
    {
        private RoleSettingsApi instance;

        public RoleSettingsApiTests()
        {
            instance = new RoleSettingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RoleSettingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RoleSettingsApi
            //Assert.IsType(typeof(RoleSettingsApi), instance, "instance is a RoleSettingsApi");
        }

        
        /// <summary>
        /// Test GetroleSettings
        /// </summary>
        [Fact]
        public void GetroleSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //string sort = null;
            //int? page = null;
            //int? maxResults = null;
            //var response = instance.GetroleSettings(where, sort, page, maxResults);
            //Assert.IsType<InlineResponse20010> (response, "response is InlineResponse20010");
        }
        
        /// <summary>
        /// Test GetroleSettingsItem
        /// </summary>
        [Fact]
        public void GetroleSettingsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleSettingsId = null;
            //var response = instance.GetroleSettingsItem(roleSettingsId);
            //Assert.IsType<RoleSettings> (response, "response is RoleSettings");
        }
        
        /// <summary>
        /// Test PatchroleSettingsItem
        /// </summary>
        [Fact]
        public void PatchroleSettingsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleSettingsId = null;
            //string ifMatch = null;
            //RoleSettings roleSettings = null;
            //instance.PatchroleSettingsItem(roleSettingsId, ifMatch, roleSettings);
            
        }
        
        /// <summary>
        /// Test PostroleSettings
        /// </summary>
        [Fact]
        public void PostroleSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RoleSettings roleSettings = null;
            //instance.PostroleSettings(roleSettings);
            
        }
        
        /// <summary>
        /// Test PutroleSettingsItem
        /// </summary>
        [Fact]
        public void PutroleSettingsItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleSettingsId = null;
            //string ifMatch = null;
            //RoleSettings roleSettings = null;
            //instance.PutroleSettingsItem(roleSettingsId, ifMatch, roleSettings);
            
        }
        
    }

}
